#!/usr/bin/env python3
import sys; assert sys.version_info[0] >= 3, "Python 3 required."
import math;

from binascii import unhexlify

from orchard_key_components import diversify_hash, prf_expand, FullViewingKey, SpendingKey
from orchard_note import OrchardNote, OrchardNotePlaintext
from orchard_pallas import Fp
from orchard_sinsemilla import sinsemilla_hash

from utils import i2lebsp, leos2bsp
from tv_output import render_args, render_tv
from tv_rand import Rand

# https://zips.z.cash/protocol/nu5.pdf#constants
MERKLE_DEPTH = 32
L_MERKLE = 255
UNCOMMITTED_ORCHARD = Fp(2)

# https://zips.z.cash/protocol/nu5.pdf#orchardmerklecrh
def merkle_crh(layer, left, right):
    assert layer < MERKLE_DEPTH
    assert len(left) == L_MERKLE
    assert len(right) == L_MERKLE
    l = i2lebsp(10, MERKLE_DEPTH - 1 - layer)
    return sinsemilla_hash(b"z.cash:Orchard-MerkleCRH", l + left + right)

def empty_roots():
    empty_roots = [UNCOMMITTED_ORCHARD]
    for layer in range(0, MERKLE_DEPTH)[::-1]:
        bits = i2lebsp(L_MERKLE, empty_roots[-1].s)
        empty_roots.append(merkle_crh(layer, bits, bits))
    return empty_roots

EMPTY_ROOTS = empty_roots()

def anchor(leaves):
    leaves0 = leaves.copy()
    # pad with empty leaves to form a perfect tree
    perfect_height = math.ceil(math.log2(len(leaves0)))
    perfect_leaves = 1 << perfect_height
    padding_len = perfect_leaves - len(leaves0)

    for _ in range(0, padding_len):
        leaves0.append(UNCOMMITTED_ORCHARD)

    hashes = [leaves0]
    for altitude in range(0, perfect_height):
        layer = MERKLE_DEPTH - 1 - altitude
        hashes.append([])
        for pos in range(0, perfect_leaves >> (altitude + 1)):
            left = hashes[altitude][pos * 2]
            right = hashes[altitude][pos * 2 + 1]
            hashes[altitude + 1].append(merkle_crh(layer, left.bits(L_MERKLE), right.bits(L_MERKLE)))

    assert len(hashes[perfect_height]) == 1
    root = hashes[perfect_height][0]
    for altitude in range(perfect_height, MERKLE_DEPTH):
        layer = MERKLE_DEPTH - 1 - altitude
        root = merkle_crh(layer, root.bits(L_MERKLE), EMPTY_ROOTS[altitude].bits(L_MERKLE))

    return root

left = unhexlify("87a086ae7d2252d58729b30263fb7b66308bf94ef59a76c9c86e7ea016536505")[::-1]
right = unhexlify("a75b84a125b2353da7e8d96ee2a15efe4de23df9601b9d9564ba59de57130406")[::-1]

left = leos2bsp(left)[:L_MERKLE]
right = leos2bsp(right)[:L_MERKLE]

# parent = merkle_crh(MERKLE_DEPTH - 1 - 25, left, right)
parent = Fp(626278560043615083774572461435172561667439770708282630516615972307985967801)
assert merkle_crh(MERKLE_DEPTH - 1 - 25, left, right) == parent
assert merkle_crh(MERKLE_DEPTH - 1 - 26, left, right) != parent

def main():
    args = render_args()

    bundle_commitments = [
        [
            [ 0x68, 0x13, 0x5c, 0xf4, 0x99, 0x33, 0x22, 0x90, 0x99, 0xa4, 0x4e,
                0xc9, 0x9a, 0x75, 0xe1, 0xe1, 0xcb, 0x46, 0x40, 0xf9, 0xb5,
                0xbd, 0xec, 0x6b, 0x32, 0x23, 0x85, 0x6f, 0xea, 0x16, 0x39,
                0x0a ],
            [ 0x78, 0x31, 0x50, 0x08, 0xfb, 0x29, 0x98, 0xb4, 0x30, 0xa5, 0x73,
                0x1d, 0x67, 0x26, 0x20, 0x7d, 0xc0, 0xf0, 0xec, 0x81, 0xea,
                0x64, 0xaf, 0x5c, 0xf6, 0x12, 0x95, 0x69, 0x01, 0xe7, 0x2f,
                0x0e ],
            [ 0xee, 0x94, 0x88, 0x05, 0x3a, 0x30, 0xc5, 0x96, 0xb4, 0x30, 0x14,
                0x10, 0x5d, 0x34, 0x77, 0xe6, 0xf5, 0x78, 0xc8, 0x92, 0x40,
                0xd1, 0xd1, 0xee, 0x17, 0x43, 0xb7, 0x7b, 0xb6, 0xad, 0xc4,
                0x0a ],
            [ 0x9d, 0xdc, 0xe7, 0xf0, 0x65, 0x01, 0xf3, 0x63, 0x76, 0x8c, 0x5b,
                0xca, 0x3f, 0x26, 0x46, 0x60, 0x83, 0x4d, 0x4d, 0xf4, 0x46,
                0xd1, 0x3e, 0xfc, 0xd7, 0xc6, 0xf1, 0x7b, 0x16, 0x7a, 0xac,
                0x1a ],
            [ 0xbd, 0x86, 0x16, 0x81, 0x1c, 0x6f, 0x5f, 0x76, 0x9e, 0xa4, 0x53,
                0x9b, 0xba, 0xff, 0x0f, 0x19, 0x8a, 0x6c, 0xdf, 0x3b, 0x28,
                0x0d, 0xd4, 0x99, 0x26, 0x16, 0x3b, 0xd5, 0x3f, 0x53, 0xa1,
                0x21 ]
        ],
        [
            [ 0x31, 0x11, 0xbe, 0x48, 0x8a, 0xfc, 0x50, 0x4c, 0x11, 0xaf, 0x2d,
                0xfb, 0x35, 0xda, 0x93, 0x2f, 0x65, 0x72, 0xee, 0xcd, 0x19,
                0xa6, 0xc8, 0x54, 0x09, 0x5b, 0x01, 0x68, 0x30, 0x88, 0xe8,
                0x25 ],
            [ 0x6f, 0x01, 0x84, 0x37, 0xde, 0x72, 0x2d, 0xa9, 0xa9, 0x88, 0x1c,
                0x6d, 0x17, 0x6f, 0xf4, 0x19, 0x60, 0x84, 0x4e, 0x6e, 0x0a,
                0x3a, 0xd6, 0xcf, 0x8e, 0xdb, 0x6a, 0xf4, 0xf1, 0xc2, 0x8a,
                0x34 ],
            [ 0x44, 0xc3, 0xb9, 0x59, 0xf9, 0xe5, 0x08, 0x0d, 0xfd, 0x55, 0x0a,
                0x84, 0x82, 0x58, 0x34, 0xfb, 0x39, 0x2b, 0x6e, 0xe6, 0x61,
                0xf8, 0x9b, 0x2b, 0xfb, 0xa5, 0xfb, 0x45, 0x44, 0x4e, 0x67,
                0x3a ],
            [ 0x5e, 0xc3, 0x6d, 0xce, 0xb0, 0xa0, 0xb1, 0xf8, 0x1e, 0x3f, 0x16,
                0x72, 0x49, 0x91, 0x78, 0x1f, 0xae, 0xfa, 0x68, 0x38, 0x24,
                0xe7, 0x4e, 0x81, 0x20, 0xf7, 0x46, 0x53, 0x08, 0xe9, 0xd9,
                0x21 ],
            [ 0x9c, 0x35, 0xf2, 0x03, 0x20, 0x36, 0x09, 0x92, 0xf6, 0xa8, 0x8a,
                0xa5, 0xc8, 0x70, 0xcd, 0xb5, 0x9c, 0x45, 0x97, 0xfe, 0x08,
                0xfb, 0xf8, 0xe1, 0xf3, 0xb2, 0x14, 0x73, 0x3d, 0x89, 0x23,
                0x2a ]
        ],
        [
            [ 0xca, 0x38, 0x0a, 0x17, 0xb6, 0xa0, 0xf2, 0x4e, 0xf0, 0x6d, 0x13,
                0x9b, 0xaa, 0x1b, 0x70, 0xe6, 0x78, 0xa7, 0x3d, 0x0e, 0x65,
                0x78, 0x58, 0x04, 0xd8, 0x8c, 0x96, 0x6a, 0xcf, 0x10, 0x37,
                0x38 ],
            [ 0xfe, 0xca, 0x8d, 0xf1, 0xc0, 0x4c, 0xda, 0x0c, 0xfc, 0xdc, 0x23,
                0x4c, 0x17, 0x14, 0x71, 0xdf, 0x7a, 0xad, 0x90, 0xac, 0x9e,
                0x28, 0x64, 0xb6, 0xe1, 0xbe, 0x0d, 0xfc, 0x6a, 0x40, 0x41,
                0x23 ],
            [ 0x83, 0x7d, 0x8d, 0xc9, 0xa8, 0x99, 0x1c, 0x17, 0x8d, 0x65, 0x02,
                0x85, 0x0c, 0x1f, 0x91, 0xb1, 0xd4, 0x1a, 0x97, 0x3e, 0xf5,
                0xa9, 0xec, 0x4b, 0x10, 0xbf, 0x46, 0x24, 0x67, 0xa7, 0xd4,
                0x21 ],
            [ 0xb6, 0x7b, 0xf5, 0x11, 0x92, 0xe3, 0x0e, 0x8b, 0x39, 0x9c, 0xed,
                0xef, 0xd8, 0xb6, 0x4f, 0x23, 0x86, 0xad, 0x1c, 0xac, 0x70,
                0xbd, 0xcc, 0xd7, 0xca, 0xc1, 0x95, 0x1a, 0x3e, 0x86, 0xb5,
                0x37 ],
            [ 0xce, 0x62, 0x6d, 0x31, 0x28, 0xca, 0x6c, 0x8f, 0xd2, 0x72, 0x21,
                0x59, 0x12, 0xde, 0x64, 0xfb, 0x74, 0xc4, 0x5d, 0x56, 0xf4,
                0x37, 0x4c, 0xe5, 0xbf, 0x05, 0x37, 0xee, 0x2e, 0x38, 0x20,
                0x07 ]
        ],
        [
            [ 0xfd, 0x22, 0x61, 0xb6, 0x2d, 0x4a, 0x70, 0x96, 0x40, 0x05, 0x44,
                0x72, 0x03, 0x34, 0x90, 0xb8, 0x3d, 0x18, 0x42, 0x02, 0xe0,
                0x26, 0x72, 0xc2, 0xff, 0x12, 0x76, 0x6c, 0x4e, 0x7d, 0x4f,
                0x0b ],
            [ 0xef, 0xc2, 0xc8, 0xe1, 0x29, 0xb5, 0x1d, 0xc6, 0x2b, 0xcb, 0xdc,
                0x3f, 0x3e, 0x1a, 0x58, 0x2c, 0xd2, 0x83, 0xc7, 0x98, 0x07,
                0x57, 0x53, 0xcd, 0x83, 0x12, 0x17, 0x33, 0x81, 0xfa, 0x1f,
                0x34 ],
            [ 0x22, 0x3b, 0xc8, 0xe6, 0x9d, 0x13, 0x2b, 0xdd, 0x85, 0x07, 0x0c,
                0xaf, 0x9e, 0x12, 0xa1, 0xbb, 0xe2, 0xe1, 0x4a, 0x63, 0x0b,
                0xec, 0x08, 0x44, 0x18, 0x1c, 0x01, 0x4e, 0x57, 0x77, 0xd1,
                0x15 ],
            [ 0xc2, 0x0a, 0x21, 0xa5, 0xe2, 0x0a, 0x76, 0xd6, 0xc5, 0x05, 0xe9,
                0x67, 0xcb, 0x9d, 0x50, 0xd7, 0x53, 0xe3, 0xd1, 0x35, 0x3c,
                0xce, 0x32, 0x6e, 0xef, 0x55, 0x5f, 0xa3, 0x31, 0xb6, 0x9c,
                0x21 ],
            [ 0xd0, 0xc7, 0x3f, 0x0f, 0x98, 0x76, 0x3b, 0xed, 0x8b, 0x14, 0x80,
                0x0f, 0x37, 0x88, 0xc9, 0x80, 0x83, 0xc8, 0x0e, 0x1c, 0x88,
                0x90, 0x46, 0x64, 0x4c, 0x95, 0x6f, 0x01, 0xe2, 0x4b, 0x1d,
                0x38 ]
        ],
        [
            [ 0xcf, 0x79, 0xd1, 0xb1, 0x1e, 0x3b, 0xa2, 0x8f, 0xc2, 0x14, 0x8f,
                0x21, 0xa6, 0x6f, 0xe1, 0x89, 0xe0, 0xff, 0xb6, 0x78, 0x60,
                0xd4, 0x91, 0x26, 0x5c, 0x18, 0x5a, 0x35, 0xb3, 0x9b, 0xb5,
                0x2b ],
            [ 0x69, 0x00, 0xdb, 0x33, 0x01, 0xa4, 0xfd, 0x80, 0x50, 0x2f, 0xa7,
                0xf0, 0xcc, 0x83, 0x42, 0x6e, 0x7a, 0xf2, 0x23, 0x1f, 0xcf,
                0x61, 0x2c, 0x0d, 0x25, 0xb6, 0x84, 0x88, 0x81, 0x3f, 0xcb,
                0x11 ],
            [ 0xfb, 0x46, 0x7e, 0xfc, 0xa6, 0xe1, 0xd5, 0x48, 0xc9, 0x30, 0x48,
                0x75, 0xfc, 0x33, 0xd3, 0xe5, 0x64, 0xf2, 0x9e, 0xe0, 0x99,
                0x7e, 0xbd, 0x18, 0x7d, 0x98, 0x59, 0x10, 0x03, 0x4d, 0xbc,
                0x04 ],
            [ 0x39, 0x0e, 0xaf, 0x40, 0x8e, 0x20, 0x9e, 0xf0, 0x69, 0xe1, 0xb3,
                0xe6, 0xbc, 0x63, 0xba, 0xce, 0x32, 0xd2, 0xf0, 0x68, 0x39,
                0xd1, 0xfe, 0xd8, 0x18, 0x17, 0xbf, 0xcc, 0x1f, 0x6f, 0xa6,
                0x14 ],
            [ 0xee, 0x60, 0xdf, 0x35, 0x19, 0xe0, 0xd9, 0xb0, 0x77, 0xf3, 0xcc,
                0x29, 0x7c, 0x62, 0x0e, 0xdd, 0xd5, 0x2e, 0x1e, 0x22, 0xb3,
                0x7c, 0xe5, 0x5e, 0xc9, 0xf8, 0xe3, 0xc3, 0x37, 0x0f, 0xb3,
                0x11 ]
        ],
        [
            [ 0x19, 0xa9, 0xe5, 0x13, 0x82, 0x6e, 0x11, 0x06, 0xa3, 0xa9, 0x5f,
                0x5e, 0x7a, 0x71, 0xc0, 0xd1, 0xdf, 0xc4, 0xc2, 0x21, 0x25,
                0xe6, 0xd6, 0x45, 0xc2, 0x79, 0x78, 0x84, 0x6b, 0xc4, 0x4b,
                0x37 ],
            [ 0xcf, 0xf9, 0x98, 0x0d, 0xea, 0xae, 0xb9, 0x9a, 0xab, 0x22, 0xa8,
                0x66, 0x92, 0x9d, 0xc2, 0x4d, 0x1d, 0x80, 0x56, 0x5e, 0x7a,
                0x2c, 0xdf, 0x74, 0x5d, 0x0a, 0xb9, 0x67, 0x6e, 0xdf, 0x2c,
                0x0d ],
            [ 0x98, 0x35, 0xdf, 0xe3, 0x97, 0x53, 0xce, 0xbb, 0xdf, 0x66, 0xc6,
                0x0b, 0x44, 0xed, 0x14, 0x4a, 0xe3, 0xbb, 0x06, 0x90, 0x57,
                0xe4, 0x43, 0x1d, 0x84, 0x29, 0xf3, 0x61, 0xc6, 0x9d, 0x21,
                0x0f ],
            [ 0xc5, 0xad, 0x66, 0x19, 0xe9, 0x6c, 0x95, 0xfd, 0xe4, 0x69, 0xf4,
                0xf7, 0x20, 0x2e, 0xb0, 0x31, 0xac, 0x95, 0xd8, 0xd2, 0x3f,
                0x31, 0x03, 0x16, 0x6a, 0x44, 0x4c, 0xf1, 0x2c, 0x4b, 0x81,
                0x3f ],
            [ 0x8a, 0x8c, 0x06, 0x1c, 0x64, 0xea, 0x83, 0x37, 0xf8, 0x11, 0x11,
                0xdd, 0x38, 0x6b, 0xef, 0x22, 0xfe, 0x0f, 0x52, 0xe2, 0xc6,
                0xa7, 0x8f, 0xbc, 0xc0, 0xd9, 0x0d, 0xcf, 0x28, 0xb2, 0xdf,
                0x1b ]
        ],
        [
            [ 0x7a, 0x3c, 0x6d, 0xc5, 0x93, 0xb9, 0x65, 0xa4, 0xa3, 0x11, 0x8a,
                0x0e, 0x9e, 0x80, 0xd0, 0x78, 0x2c, 0xb4, 0x13, 0x99, 0x79,
                0x0b, 0xa7, 0xf6, 0x49, 0x77, 0x1c, 0x74, 0x43, 0xa3, 0x6d,
                0x01 ],
            [ 0x0b, 0xbb, 0x5a, 0xfb, 0xb7, 0xc5, 0x00, 0x5e, 0x14, 0x9f, 0x8b,
                0x5b, 0xf5, 0xfe, 0x35, 0x40, 0xb3, 0x7d, 0x31, 0xe3, 0xc2,
                0xb2, 0x14, 0x33, 0x73, 0x59, 0xda, 0xe3, 0x31, 0x30, 0x23,
                0x11 ],
            [ 0x93, 0x35, 0x52, 0xa5, 0xc9, 0xd7, 0x3e, 0x50, 0xf6, 0xdb, 0xcf,
                0xa4, 0x1e, 0xa3, 0xd0, 0xa5, 0x29, 0x46, 0xb1, 0x87, 0x8e,
                0xda, 0x5c, 0x96, 0xd7, 0xd8, 0xb0, 0xe4, 0x71, 0x68, 0x0b,
                0x27 ],
            [ 0x62, 0x8b, 0xa8, 0x4e, 0x08, 0x63, 0xb6, 0x27, 0x72, 0x7d, 0xf9,
                0xa1, 0x98, 0xb0, 0x9d, 0xd0, 0xe3, 0x1a, 0xff, 0x7c, 0xba,
                0xec, 0x87, 0xcd, 0x93, 0x3d, 0x0f, 0x76, 0x58, 0xea, 0xcb,
                0x3a ],
            [ 0x90, 0x5f, 0x7a, 0x5e, 0x88, 0xa0, 0x16, 0xa1, 0x66, 0x8d, 0xdd,
                0x41, 0xea, 0xcb, 0x91, 0x28, 0x78, 0xc7, 0xcb, 0xeb, 0x42,
                0xa9, 0x31, 0x90, 0x33, 0x98, 0xe0, 0x5f, 0xdc, 0xe6, 0x8b,
                0x29 ]
        ],
        [
            [ 0x94, 0x92, 0xc9, 0x01, 0x95, 0x73, 0x31, 0xd5, 0xe7, 0x94, 0xe5,
                0x9a, 0xd4, 0x73, 0x67, 0x51, 0x68, 0x0f, 0x2f, 0xde, 0xca,
                0x12, 0x3f, 0xf3, 0xcb, 0xe0, 0xc6, 0x3a, 0x2d, 0xc8, 0x61,
                0x36 ],
            [ 0x5c, 0xd8, 0x54, 0x1a, 0x4c, 0x92, 0x0e, 0x4d, 0x7e, 0xac, 0x65,
                0x71, 0xa6, 0xe9, 0x3b, 0x40, 0xcb, 0xda, 0x99, 0xf3, 0x48,
                0xf1, 0x70, 0x40, 0x0f, 0x91, 0x81, 0xb8, 0x1e, 0xb2, 0xcf,
                0x17 ],
            [ 0x65, 0x90, 0x97, 0x4e, 0xcb, 0x6e, 0x62, 0xb4, 0x8d, 0x21, 0x9f,
                0xcf, 0xf7, 0x5d, 0x6d, 0xf8, 0x55, 0x8e, 0xb6, 0xb5, 0xd4,
                0x3e, 0x17, 0x3c, 0x88, 0x45, 0xb0, 0x59, 0x31, 0x5c, 0x56,
                0x10 ],
            [ 0x0c, 0xe2, 0xec, 0x64, 0xa3, 0xd3, 0x5a, 0xca, 0x95, 0x4f, 0x9f,
                0x77, 0xfc, 0xb6, 0x96, 0xb2, 0x13, 0xb1, 0x09, 0xc9, 0xef,
                0x55, 0x14, 0xf2, 0x84, 0x1a, 0xd0, 0xd9, 0x6f, 0x49, 0x17,
                0x38 ],
            [ 0x2c, 0x02, 0x15, 0x93, 0x8c, 0x51, 0x65, 0xff, 0xd4, 0x67, 0x0d,
                0xd5, 0xec, 0xff, 0xae, 0xb2, 0x4c, 0x4c, 0x35, 0xde, 0x59,
                0x4e, 0xad, 0xc8, 0xf4, 0xd4, 0xd6, 0x0e, 0xac, 0xb9, 0xc0,
                0x31 ]
        ],
        [
            [ 0xe6, 0x58, 0x63, 0x2a, 0x79, 0x0b, 0x84, 0xc2, 0x78, 0x7f, 0x87,
                0x33, 0x28, 0x3f, 0xe6, 0xd2, 0x32, 0x60, 0x0d, 0x73, 0xba,
                0x89, 0x79, 0x5b, 0xad, 0x40, 0x0c, 0x4b, 0x9b, 0x77, 0xa0,
                0x29 ],
            [ 0x4e, 0x15, 0x6a, 0x3b, 0x37, 0x24, 0x5d, 0xe5, 0xd9, 0x77, 0x64,
                0xe1, 0x7d, 0x8c, 0x46, 0x46, 0x70, 0x38, 0xd8, 0xc7, 0xae,
                0x5c, 0xee, 0x82, 0x25, 0xa1, 0xe2, 0xa2, 0xad, 0x7f, 0x4a,
                0x25 ],
            [ 0xdd, 0x8e, 0x1a, 0xf4, 0x86, 0xfd, 0x57, 0x39, 0x3c, 0x41, 0xbd,
                0x93, 0x83, 0xc8, 0x76, 0x3d, 0x17, 0xfe, 0x14, 0xeb, 0xed,
                0x7b, 0x0f, 0x2b, 0x08, 0x42, 0x96, 0x30, 0x1f, 0x72, 0xbd,
                0x07 ],
            [ 0x92, 0x78, 0xa1, 0xa9, 0x69, 0x31, 0x11, 0xfa, 0x4c, 0x47, 0x00,
                0x70, 0xd6, 0x2c, 0xef, 0x52, 0x67, 0x61, 0x1f, 0xec, 0x8f,
                0xeb, 0xad, 0x0e, 0x3c, 0x97, 0x73, 0xb7, 0xef, 0x8f, 0x02,
                0x1d ],
            [ 0x44, 0x37, 0x42, 0x53, 0xe5, 0x53, 0x0f, 0x77, 0x64, 0xfd, 0x67,
                0x04, 0xe9, 0xb7, 0xb5, 0x06, 0x4a, 0x3d, 0x5b, 0xcb, 0x52,
                0x5a, 0xff, 0x1d, 0xab, 0xde, 0x9f, 0x09, 0x1c, 0xa1, 0xb6,
                0x13 ]
        ],
        [
            [ 0x80, 0x23, 0x61, 0x98, 0x92, 0x47, 0xb1, 0xb6, 0x2e, 0xd1, 0xce,
                0xa5, 0x5a, 0xab, 0x89, 0xec, 0x29, 0x87, 0xf3, 0x05, 0x2f,
                0x1d, 0x1a, 0x29, 0x84, 0x60, 0x9d, 0x1f, 0x1e, 0x80, 0xd6,
                0x00 ],
            [ 0xfa, 0xb8, 0xed, 0x98, 0x20, 0xb7, 0x9a, 0x0d, 0xe9, 0x96, 0xcd,
                0x0e, 0x8f, 0x52, 0xb2, 0x4b, 0x02, 0xec, 0x89, 0x5f, 0x3f,
                0xce, 0x56, 0xa4, 0x67, 0x79, 0xb5, 0x03, 0x09, 0x83, 0x5a,
                0x23 ],
            [ 0xd9, 0xfe, 0x9f, 0x36, 0x08, 0xa6, 0xc6, 0xff, 0x09, 0x93, 0x58,
                0xa6, 0x94, 0xf6, 0xae, 0xce, 0x4d, 0xa0, 0xc5, 0x35, 0x62,
                0x8a, 0x88, 0x82, 0x43, 0x52, 0x9c, 0xa9, 0xb1, 0xf7, 0xa8,
                0x10 ],
            [ 0x1f, 0x01, 0xf1, 0xf8, 0xf4, 0xb5, 0x64, 0xd8, 0xb0, 0xff, 0xd3,
                0x2a, 0xff, 0x11, 0x24, 0x3d, 0xee, 0x25, 0x82, 0xb4, 0xa3,
                0xef, 0xbb, 0xce, 0xc9, 0x20, 0x02, 0x6c, 0x5e, 0x1f, 0x44,
                0x1e ],
            [ 0xa0, 0x65, 0x87, 0xcc, 0xc0, 0x3f, 0x14, 0x92, 0x94, 0x65, 0xcd,
                0x3d, 0x93, 0x37, 0x90, 0xda, 0xb1, 0x23, 0xae, 0x4e, 0x57,
                0x55, 0x8a, 0x7a, 0xf4, 0xfc, 0x06, 0x1e, 0x6b, 0x46, 0x7f,
                0x1c ]
        ]
    ]

    merkle_leaves = []
    test_vectors = []
    for note_commitments in bundle_commitments:
        for c in note_commitments:
            cmx = Fp.from_bytes(bytes(c))
            merkle_leaves.append(cmx)

        a = anchor(merkle_leaves)
        test_vectors.append({
            'anchor': bytes(a)
        })

    render_tv(
        args,
        'orchard_merkle_tree',
        (
            ('anchor', '[u8; 32]'),
        ),
        test_vectors,
    )


if __name__ == '__main__':
    main()
